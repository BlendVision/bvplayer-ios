// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BVPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import BVPSE
import CoreMedia
import DeveloperToolsSupport
import Foundation
import GoogleCast
import MediaPlayer
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol AnalyticsListener : ObjectiveC.NSObjectProtocol {
  func logData(_ data: BVPlayer.LogData)
}
@objc public class Analytics : ObjectiveC.NSObject {
  public func add(listener: any BVPlayer.AnalyticsListener)
  public func remove(listener: any BVPlayer.AnalyticsListener)
  public init(config: [Swift.String : Swift.String])
  @objc deinit
}
extension BVPlayer.Analytics : BVPlayer.UniLoggerListener {
  public func logEvent(_ event: BVPlayer.UniLogEvent)
}
public struct Resolution : Swift.Equatable {
  public let width: Swift.Int, height: Swift.Int
  public static let FullHD: BVPlayer.Resolution
  public static let HD: BVPlayer.Resolution
  public static let SD: BVPlayer.Resolution
  public static func == (a: BVPlayer.Resolution, b: BVPlayer.Resolution) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSubtitleTrack : BVPlayer.UniTrack {
  @objc deinit
}
public protocol UniSourceListener : ObjectiveC.NSObjectProtocol {
  func source(_ source: BVPlayer.UniSource, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
}
extension BVPlayer.UniSourceListener {
  public func source(_ source: BVPlayer.UniSource, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
}
public enum PLLogSeverity : Swift.Int, Swift.CustomStringConvertible, Swift.CaseIterable {
  case verbose, debug, info, warning, error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BVPlayer.PLLogSeverity]
  public typealias RawValue = Swift.Int
  public static var allCases: [BVPlayer.PLLogSeverity] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct MasterPlaylist {
  public var media: [BVPlayer.MasterPlaylist.Media]
  public var streams: [BVPlayer.MasterPlaylist.Stream]
  public struct Media {
    public var type: Swift.String
    public var `default`: Swift.Bool?, autoSelect: Swift.Bool?, forced: Swift.Bool?
    public var uri: Swift.String?, groupId: Swift.String?, language: Swift.String?, associateLanguage: Swift.String?, name: Swift.String?
    public var stableRenditionId: Swift.String?, instreamId: Swift.String?, characteristics: Swift.String?, channels: Swift.String?
  }
  public struct Stream {
    public var path: Swift.String
    public var bandwidth: Swift.Int
    public var resolution: BVPlayer.Resolution?
    public var averageBandwidth: Swift.Int?
    public var score: Swift.Float?, frameRate: Swift.Float?
    public var codecs: Swift.String?, hdcpLevel: Swift.String?, allowedCPC: Swift.String?, videoRange: Swift.String?, stableVariantId: Swift.String?
    public var audio: Swift.String?, video: Swift.String?, subtitles: Swift.String?, closeCaptions: Swift.String?, pathwayId: Swift.String?
  }
  public static func parse(content: Swift.String) -> BVPlayer.MasterPlaylist?
}
@objc @_hasMissingDesignatedInitializers public class UniSource : ObjectiveC.NSObject {
  public var sourceConfig: BVPlayer.UniSourceConfig {
    get
  }
  @objc deinit
  public func add(listener: any BVPlayer.UniSourceListener)
  public func remove(listener: any BVPlayer.UniSourceListener)
}
extension BVPlayer.UniSource {
  public func thumbnail(forTime time: Foundation.TimeInterval) -> BVPlayer.UniThumbnail?
}
public struct LogData {
  public var eventType: Swift.String
  public var eventName: Swift.String
  public var eventContent: Swift.String
  public var eventTime: Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerControlView : UIKit.UIView {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniBufferMediaTypeConfig {
  public var forwardDuration: Foundation.TimeInterval
  public var audioTimePitchAlgorithm: AVFoundation.AVAudioTimePitchAlgorithm
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniBufferConfig {
  public var audioAndVideo: BVPlayer.UniBufferMediaTypeConfig
  @objc deinit
}
@objc final public class WidevineConfig : BVPlayer.UniDrmConfig {
  final public var licenseRequestHeaders: [Swift.String : Swift.String]
  public init(license licenseUrl: Foundation.URL?)
  @objc deinit
}
public struct UniVideoQuality : Swift.Comparable {
  public static func < (lhs: BVPlayer.UniVideoQuality, rhs: BVPlayer.UniVideoQuality) -> Swift.Bool
  public let bitrate: Swift.UInt
  public let width: Swift.UInt
  public let height: Swift.UInt
  public static func == (a: BVPlayer.UniVideoQuality, b: BVPlayer.UniVideoQuality) -> Swift.Bool
}
public enum KKSPlayerModuleInfo {
  public static var moduleVersion: Swift.String {
    get
  }
  public static var deviceID: Swift.String {
    get
  }
}
extension Swift.String {
  public func decodingHTMLEntities() -> Swift.String
}
public protocol DownloadContentManagerEventHandler : ObjectiveC.NSObjectProtocol {
  func add(listener: any BVPlayer.DownloadContentManagerListener)
  func remove(listener: any BVPlayer.DownloadContentManagerListener)
}
public struct PosterViewConfig {
  public var title: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var posterSource: Foundation.URL? {
    get
  }
  public var sharedUrl: Foundation.URL? {
    get
  }
  public var sourceConfig: BVPlayer.UniSourceConfig
  public init(source config: BVPlayer.UniSourceConfig)
}
public enum UniEventName : Swift.String {
  case unknown
  case ready
  case playing
  case paused
  case timeChanged
  case loadedTimeRangeChanged
  case seek
  case seeked
  case stallStarted
  case stallEnded
  case playbackFinished
  case audioChanged
  case subtitleChanged
  case sourceLoad
  case sourceLoaded
  case sourceUnload
  case sourceUnloaded
  case videoPlaybackQualityChanged
  case playbackSpeedChanged
  case sourceError
  case muted
  case unmuted
  case audioVolumeChanged
  case playerError
  case timeShift
  case timeShifted
  case loopChanged
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UniEvent {
  var timestamp: Foundation.TimeInterval { get }
  var name: BVPlayer.UniEventName { get }
}
@_hasMissingDesignatedInitializers public class UniPlayerEvent : BVPlayer.UniEvent {
  final public let timestamp: Foundation.TimeInterval
  public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniReadyEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayingEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPausedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTimeChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let currentTime: Foundation.TimeInterval
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniLoadedTimeRangeChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let start: Foundation.TimeInterval
  final public let end: Foundation.TimeInterval
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSeekEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let from: BVPlayer.SeekPosition
  final public let to: BVPlayer.SeekPosition
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSeekedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SeekPosition {
  final public let time: Foundation.TimeInterval
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniStallStartedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniStallEndedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackFinishedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniAudioChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let audioTrackNew: BVPlayer.UniAudioTrack
  final public let audioTrackOld: BVPlayer.UniAudioTrack?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSubtitleChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let subtitleTrackNew: BVPlayer.UniSubtitleTrack?
  final public let subtitleTrackOld: BVPlayer.UniSubtitleTrack?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniVideoPlaybackQualityChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let videoQualityNew: BVPlayer.UniVideoQuality
  final public let videoQualityOld: BVPlayer.UniVideoQuality?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPlaybackSpeedChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let from: Swift.Float
  final public let to: Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSourceErrorEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  final public let code: BVPlayer.SourceErrorCode
  final public let message: Swift.String
  public var data: BVPlayer.UniDeficiencyData?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniMutedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniUnmutedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniAudioVolumeChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTimeShiftEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniTimeShiftedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniLoopChangedEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
public class UniPlaybackConfig {
  public var isAutoplayEnabled: Swift.Bool
  public var isMuted: Swift.Bool
  public var isLatencyMonitorEnabled: Swift.Bool
  public init()
  @objc deinit
}
public protocol UniFullscreenHandler : ObjectiveC.NSObjectProtocol {
  var isFullscreen: Swift.Bool { get }
  func onFullscreenRequested()
  func onFullscreenExitRequested()
}
@objc @_inheritsConvenienceInitializers final public class CastManagerOptions : ObjectiveC.NSObject {
  final public var applicationId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(with url: Foundation.URL?, completion: ((UIKit.UIImage?) -> Swift.Void)? = nil)
}
public struct WebVTT {
  public let cues: [BVPlayer.WebVTT.Cue]
  public init(cues: [BVPlayer.WebVTT.Cue])
}
extension BVPlayer.WebVTT {
  public struct Cue {
    public let timing: BVPlayer.WebVTT.Cue.Timing
    public let setting: BVPlayer.WebVTT.Cue.Setting
    public let text: Swift.String
  }
}
extension BVPlayer.WebVTT.Cue {
  public var timeStart: Foundation.TimeInterval {
    get
  }
  public var timeEnd: Foundation.TimeInterval {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public struct Timing {
    public let start: Swift.Int, end: Swift.Int
    public var duration: Swift.Int {
      get
    }
  }
  public struct Setting {
    public let align: Swift.String?
    public let size: Swift.Float?
    public let line: Swift.Float?
    public let position: Swift.Float?
  }
}
public enum DownloadState : Swift.Int, @unchecked Swift.Sendable {
  case downloaded
  case downloading
  case suspended
  case notDownloaded
  case canceling
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct UniThumbnail {
  public let start: Foundation.TimeInterval
  public let end: Foundation.TimeInterval
  public let text: Swift.String
  public let url: Foundation.URL
  public let px: Swift.UInt
  public let py: Swift.UInt
  public let width: Swift.UInt
  public let height: Swift.UInt
}
public struct DownloadConfig {
  public var minimumBitrate: Foundation.NSNumber?
  public init()
}
public protocol DownloadContentManagerListener : ObjectiveC.NSObjectProtocol {
  var downloadContentManagerListeners: [any BVPlayer.DownloadContentManagerListener] { get }
  func onContentDownloadFinished(_ event: any BVPlayer.ContentDownloadFinishedEvent, manager: BVPlayer.DownloadContentManager)
  func onContentDownloadProgressChanged(_ event: any BVPlayer.ContentDownloadProgressChangedEvent, manager: BVPlayer.DownloadContentManager)
  func onContentDownloadSuspended(_ event: any BVPlayer.ContentDownloadSuspendedEvent, manager: BVPlayer.DownloadContentManager)
  func onContentDownloadResumed(_ event: any BVPlayer.ContentDownloadResumedEvent, manager: BVPlayer.DownloadContentManager)
  func onContentDownloadCanceled(_ event: any BVPlayer.ContentDownloadCanceledEvent, manager: BVPlayer.DownloadContentManager)
  func onAvailableTracksDownloaded(_ event: any BVPlayer.AvailableTracksDownloadedEvent, manager: BVPlayer.DownloadContentManager)
  func onDownloadedContentRenewed(_ event: any BVPlayer.DownloadedContentRenewedEvent, manager: BVPlayer.DownloadContentManager)
  func onDownloadError(_ event: any BVPlayer.ContentDownloadErrorEvent, manager: BVPlayer.DownloadContentManager)
  func onEvent(_ event: any BVPlayer.DownloadEvent, manager: BVPlayer.DownloadContentManager)
}
extension BVPlayer.DownloadContentManagerListener {
  public var downloadContentManagerListeners: [any BVPlayer.DownloadContentManagerListener] {
    get
  }
  public func onEvent(_ event: any BVPlayer.DownloadEvent, manager: BVPlayer.DownloadContentManager)
}
extension BVPlayer.DownloadContentManagerListener {
  public func onContentDownloadFinished(_ event: any BVPlayer.ContentDownloadFinishedEvent, manager: BVPlayer.DownloadContentManager)
  public func onContentDownloadProgressChanged(_ event: any BVPlayer.ContentDownloadProgressChangedEvent, manager: BVPlayer.DownloadContentManager)
  public func onContentDownloadSuspended(_ event: any BVPlayer.ContentDownloadSuspendedEvent, manager: BVPlayer.DownloadContentManager)
  public func onContentDownloadResumed(_ event: any BVPlayer.ContentDownloadResumedEvent, manager: BVPlayer.DownloadContentManager)
  public func onContentDownloadCanceled(_ event: any BVPlayer.ContentDownloadCanceledEvent, manager: BVPlayer.DownloadContentManager)
  public func onDownloadError(_ event: any BVPlayer.ContentDownloadErrorEvent, manager: BVPlayer.DownloadContentManager)
  public func onAvailableTracksDownloaded(_ event: any BVPlayer.AvailableTracksDownloadedEvent, manager: BVPlayer.DownloadContentManager)
  public func onDownloadedContentRenewed(_ event: any BVPlayer.DownloadedContentRenewedEvent, manager: BVPlayer.DownloadContentManager)
}
public let pLog: BVPlayer.PLPrioritizingLogSystem
@_hasMissingDesignatedInitializers public class PLPrioritizingLogSystem {
  public func setEnabled(_ isEnabled: Swift.Bool)
  public var pitches: [BVPlayer.PLLogPitch]
  @objc deinit
}
public struct PictureInPictureConfig {
  public typealias RestoreUserInterfaceHandler = (_ completionHandler: @escaping (_ restored: Swift.Bool) -> Swift.Void) -> Swift.Void
  public var isEnabled: Swift.Bool
  @available(tvOS, unavailable)
  public var showSkipControls: Swift.Bool
  public var restoreUserInterfaceHandler: BVPlayer.PictureInPictureConfig.RestoreUserInterfaceHandler?
}
public enum WebVTTError : Swift.Error {
  case invalidSignature
  public static func == (a: BVPlayer.WebVTTError, b: BVPlayer.WebVTTError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class WebVTTParser {
  public init(string: Swift.String)
  public func parse() throws -> BVPlayer.WebVTT
  @objc deinit
}
extension Foundation.Bundle {
  public var shortVersionString: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class UniThumbnailTrack : BVPlayer.UniTrack {
  public init(url: Foundation.URL, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc deinit
}
public enum DownloadTrackAction : Swift.Int {
  case none
  case download
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class DownloadTrack : ObjectiveC.NSObject {
  final public let identifier: Swift.String
  final public let action: BVPlayer.DownloadTrackAction
  final public let label: Swift.String
  final public let language: Swift.String?
  final public let isDefault: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DownloadTextTrack : BVPlayer.DownloadTrack {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DownloadAudioTrack : BVPlayer.DownloadTrack {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DownloadTrackSelection : ObjectiveC.NSObject {
  final public let textTracks: [BVPlayer.DownloadTextTrack]
  final public let audioTracks: [BVPlayer.DownloadAudioTrack]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniTweaksConfig {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UniDrmConfig : ObjectiveC.NSObject {
  public var licenseUrl: Foundation.URL?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class UniFairPlayConfig : BVPlayer.UniDrmConfig {
  public var certificateUrl: Foundation.URL?
  public var licenseRequestHeaders: [Swift.String : Swift.String]?
  public var certificateRequestHeaders: [Swift.String : Swift.String]?
  public init(licenseUrl: Foundation.URL?, certificateUrl: Foundation.URL)
  public var prepareMessage: ((_ spcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data?)?
  public var prepareCertificate: ((_ certificate: Foundation.Data) -> Foundation.Data)?
  public var prepareLicense: ((_ ckc: Foundation.Data) -> Foundation.Data)?
  public var persistLicenseData: ((_ assetId: Swift.String, _ licenseData: Foundation.Data) -> Swift.Void)?
  public var provideLicenseData: ((_ assetId: Swift.String) -> Foundation.Data?)?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class OfflineSourceConfig : BVPlayer.UniSourceConfig {
  @objc deinit
}
public enum UniUIEventName : Swift.String {
  case unknown
  case settingPressed
  case controlViewChanged
  case infoPressed
  case sharePressed
  case pictureInPictureEnter
  case pictureInPictureEntered
  case pictureInPictureExit
  case pictureInPictureExited
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UniUIEventProtocol {
  var timestamp: Foundation.TimeInterval { get }
  var name: BVPlayer.UniUIEventName { get }
}
@_hasMissingDesignatedInitializers public class UniUIEvent : BVPlayer.UniUIEventProtocol {
  final public let timestamp: Foundation.TimeInterval
  public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSettingPressedEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniControlViewChangedEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniInfoPressedEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSharePressedEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  final public let sharedURL: Foundation.URL?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PictureInPictureEnterEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PictureInPictureEnteredEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PictureInPictureExitEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PictureInPictureExitedEvent : BVPlayer.UniUIEvent {
  override public var name: BVPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
public protocol UniUserInterfaceListener : ObjectiveC.NSObjectProtocol {
  func playerView(_ view: BVPlayer.UniPlayerView, didReceiveSettingPressed event: BVPlayer.UniUIEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceiveControlViewChanged event: BVPlayer.UniControlViewChangedEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceiveInfoPressed event: BVPlayer.UniUIEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceiveSharePressed event: BVPlayer.UniSharePressedEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureEnter event: BVPlayer.PictureInPictureEnterEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureEntered event: BVPlayer.PictureInPictureEnteredEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureExit event: BVPlayer.PictureInPictureExitEvent)
  func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureExited event: BVPlayer.PictureInPictureExitedEvent)
}
extension BVPlayer.UniUserInterfaceListener {
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveSettingPressed event: BVPlayer.UniUIEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveControlViewChanged event: BVPlayer.UniControlViewChangedEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveInfoPressed event: BVPlayer.UniUIEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveSharePressed event: BVPlayer.UniSharePressedEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureEnter event: BVPlayer.PictureInPictureEnterEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureEntered event: BVPlayer.PictureInPictureEnteredEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureExit event: BVPlayer.PictureInPictureExitEvent)
  public func playerView(_ view: BVPlayer.UniPlayerView, didReceivePictureInPictureExited event: BVPlayer.PictureInPictureExitedEvent)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isPictureInPicture: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isPictureInPictureAvailable: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var styleConfig: BVPlayer.UniStyleConfig
  @_Concurrency.MainActor(unsafe) public var showsPlaybackControls: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var managesPlaybackControlsAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var posterViewConfig: BVPlayer.PosterViewConfig? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var fullscreenHandler: (any BVPlayer.UniFullscreenHandler)?
  @_Concurrency.MainActor(unsafe) public init(player: BVPlayer.UniPlayer, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(player: BVPlayer.UniPlayer, frame: CoreFoundation.CGRect, playerViewConfig: BVPlayer.PlayerViewConfig)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func enterFullscreen()
  @_Concurrency.MainActor(unsafe) public func exitFullscreen()
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadedEvent event: BVPlayer.UniSourceLoadedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnReadyEvent event: any BVPlayer.UniEvent)
}
extension BVPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) public func add(listener: any BVPlayer.UniUserInterfaceListener)
  @_Concurrency.MainActor(unsafe) public func remove(listener: any BVPlayer.UniUserInterfaceListener)
}
extension BVPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
extension BVPlayer.UniPlayerView : BVPlayer.UniSourceListener {
  @_Concurrency.MainActor(unsafe) public func source(_ source: BVPlayer.UniSource, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
}
extension BVPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) public func startPictureInPicture()
  @_Concurrency.MainActor(unsafe) public func stopPictureInPicture()
}
@_hasMissingDesignatedInitializers public class PLLogPitch {
  final public let createdDate: Foundation.Date
  final public let logSeverity: Swift.Int
  final public let file: Swift.String
  final public let line: Swift.Int
  final public let method: Swift.String
  final public let message: Swift.String
  @objc deinit
}
extension BVPlayer.PLLogPitch : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct PlayerViewConfig {
  public var pictureInPictureConfig: BVPlayer.PictureInPictureConfig
  public init()
}
@_hasMissingDesignatedInitializers public class UniSourceEvent : BVPlayer.UniEvent {
  final public let timestamp: Foundation.TimeInterval
  public var name: BVPlayer.UniEventName {
    get
  }
  final public let source: BVPlayer.UniSource
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceLoadEvent : BVPlayer.UniSourceEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceLoadedEvent : BVPlayer.UniSourceEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceUnloadEvent : BVPlayer.UniSourceEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceUnloadedEvent : BVPlayer.UniSourceEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniSettingViewController : BVPlayer.UniUITableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public init(player: BVPlayer.UniPlayer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniLogEvent {
  public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  public var properties: [BVPlayer.UniLogEvent.PropertyName : Any]
  public var toDictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayerLoadingLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayerStartedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackStartedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackPausedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBufferBeganLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBufferEndedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackSeekBeganLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackSeekEndedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBeganLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackEndedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoQualityChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoSubtitleChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoAudioTrackChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioMuteChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackErrorLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSpeedChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioVolumeChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniLoopChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiVideoQualityChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSpeedChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioTrackChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSubtitleChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioVolumeChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioMuteChangedLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiPlayLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiPauseLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSeekLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiRewindLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiForwardLogEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiLoopChangedEvent : BVPlayer.UniLogEvent {
  override public var name: BVPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
extension BVPlayer.UniLogEvent {
  public enum EventName : Swift.String {
    case none
    case playerLoading
    case playerStarted
    case playbackStarted
    case playbackBegan
    case playbackPaused
    case playbackBufferBegan
    case playbackBufferEnded
    case playbackEnded
    case playbackSeekBegan
    case playbackSeekEnded
    case videoQualityChanged
    case audioTrackChanged
    case speedChanged
    case subtitleChanged
    case playbackError
    case playbackAudioMuteChanged
    case audioVolumeChanged
    case loopChanged
    case apiVideoQualitySettingChange
    case apiSpeedChanged
    case apiAudioTrackChanged
    case apiSubtitleChanged
    case apiAudioVolumeChanged
    case apiAudioMuteChanged
    case apiPlay
    case apiPause
    case apiSeek
    case apiForward
    case apiRewind
    case apiLoop
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension BVPlayer.UniLogEvent {
  public enum PropertyName : Swift.String {
    case playerName
    case playerModuleVersion
    case systemTime
    case currentTime
    case duration
    case errorCode
    case bandwidth
    case width
    case height
    case playbackSpeed
    case muted
    case lang
    case volume
    case qualityName
    case pseConfigured
    case pseEnabled
    case loop
    case deviceId
    case deviceCategory
    case devicePlatform
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioTrack : BVPlayer.UniTrack {
  @objc deinit
}
public enum UniPlayerErrorCode : Swift.Int {
  case unknown
  case licenseKeyNotFound
  case licenseAuthenticationFailed
  case ullNotAllowed
  case apiError
  case licenseInvalid
  case invalidArgument
  case internalError
  case externalUllForbidden
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct UniDeficiencyData {
  public let code: Swift.Int
  public let message: Swift.String
}
@_hasMissingDesignatedInitializers public class UniPlayerErrorEvent : BVPlayer.UniPlayerEvent {
  override public var name: BVPlayer.UniEventName {
    get
  }
  public var message: Swift.String {
    get
  }
  final public let code: BVPlayer.UniPlayerErrorCode
  final public let data: BVPlayer.UniDeficiencyData?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniAdaptationConfig {
  final public var maxSelectableBitrate: Swift.UInt
  @objc deinit
}
extension BVPlayer.UniPlayer {
  public var volume: Swift.Float {
    get
    set
  }
  public var isMuted: Swift.Bool {
    get
    set
  }
}
extension BVPlayer.WebVTTParser {
  public static func deduplicateCues(_ cues: [BVPlayer.WebVTT.Cue]) -> [BVPlayer.WebVTT.Cue]
}
public protocol UniPlayerListener : ObjectiveC.NSObjectProtocol {
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnReadyEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlayingEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnPausedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: BVPlayer.UniTimeChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekEvent event: BVPlayer.UniSeekEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallStartedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallEndedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: BVPlayer.UniAudioChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: BVPlayer.UniSubtitleChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: BVPlayer.UniSourceLoadEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadedEvent event: BVPlayer.UniSourceLoadedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: BVPlayer.UniVideoPlaybackQualityChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: BVPlayer.UniPlaybackSpeedChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveMutedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveUnmutedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveAudioVolumeChangedEvent event: BVPlayer.UniAudioVolumeChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadEvent event: BVPlayer.UniSourceUnloadEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: BVPlayer.UniSourceUnloadedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveErrorEvent event: BVPlayer.UniPlayerErrorEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveTimeShiftEvent event: BVPlayer.UniTimeShiftEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveTimeShiftedEvent event: any BVPlayer.UniEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveLoadedTimeChangedEvent event: BVPlayer.UniLoadedTimeRangeChangedEvent)
  func player(_ player: BVPlayer.UniPlayer, didReceiveLoopChangedEvent event: BVPlayer.UniLoopChangedEvent)
}
extension BVPlayer.UniPlayerListener {
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnReadyEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlayingEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPausedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: BVPlayer.UniTimeChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekEvent event: BVPlayer.UniSeekEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallStartedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallEndedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: BVPlayer.UniAudioChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: BVPlayer.UniSubtitleChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: BVPlayer.UniSourceLoadEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadedEvent event: BVPlayer.UniSourceLoadedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: BVPlayer.UniVideoPlaybackQualityChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: BVPlayer.UniPlaybackSpeedChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveMutedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveUnmutedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveAudioVolumeChangedEvent event: BVPlayer.UniAudioVolumeChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadEvent event: BVPlayer.UniSourceUnloadEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: BVPlayer.UniSourceUnloadedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveErrorEvent event: BVPlayer.UniPlayerErrorEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveTimeShiftEvent event: BVPlayer.UniTimeShiftEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveTimeShiftedEvent event: any BVPlayer.UniEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveLoadedTimeChangedEvent event: BVPlayer.UniLoadedTimeRangeChangedEvent)
  public func player(_ player: BVPlayer.UniPlayer, didReceiveLoopChangedEvent event: BVPlayer.UniLoopChangedEvent)
}
public struct CastConstant {
  public static var kReceiverAppID: Swift.String {
    get
  }
}
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class UniTrack : ObjectiveC.NSObject {
  public var url: Foundation.URL? {
    get
  }
  public var label: Swift.String {
    get
  }
  public var identifier: Swift.String {
    get
  }
  public var isDefaultTrack: Swift.Bool {
    get
  }
  public var language: Swift.String? {
    get
  }
  @objc deinit
}
@objc public class FairplayContentKeyRequest : ObjectiveC.NSObject {
  final public let skdUri: Swift.String
  public init(skdUri: Swift.String, contentKeyRequest: AVFoundation.AVContentKeyRequest)
  @objc deinit
}
public protocol UniPlayerViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  func playerViewController(_ controller: BVPlayer.UniPlayerViewController, didTapShareButtonWithURL url: Foundation.URL?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var player: BVPlayer.UniPlayer?
  @_Concurrency.MainActor(unsafe) public var sourceConfig: BVPlayer.UniSourceConfig?
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any BVPlayer.UniPlayerViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var playerView: BVPlayer.UniControllerPlayerView?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension BVPlayer.UniPlayerViewController {
  @_Concurrency.MainActor(unsafe) public func load()
}
extension BVPlayer.UniPlayerViewController : BVPlayer.UniUserInterfaceListener {
  @_Concurrency.MainActor(unsafe) public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveControlViewChanged event: BVPlayer.UniControlViewChangedEvent)
  @_Concurrency.MainActor(unsafe) public func playerView(_ view: BVPlayer.UniPlayerView, didReceiveSettingPressed event: BVPlayer.UniUIEvent)
}
extension BVPlayer.UniPlayerViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
extension BVPlayer.UniPlayerViewController : BVPlayer.CastManagerListener {
  @_Concurrency.MainActor(unsafe) public func applicationRequestDidComplete(_ deviceName: Swift.String)
}
public protocol Event {
  var name: Swift.String { get }
  var timestamp: Foundation.TimeInterval { get }
}
extension BVPlayer.Event {
  public var timestamp: Foundation.TimeInterval {
    get
  }
}
public protocol DownloadEvent : BVPlayer.Event {
}
public protocol ContentDownloadProgressChangedEvent : BVPlayer.DownloadEvent {
  var progress: Swift.Double { get }
}
public protocol ContentDownloadResumedEvent : BVPlayer.DownloadEvent {
  var progress: Swift.Double { get }
}
public protocol ContentDownloadSuspendedEvent : BVPlayer.DownloadEvent {
}
public protocol ContentDownloadFinishedEvent : BVPlayer.DownloadEvent {
}
public protocol ContentDownloadCanceledEvent : BVPlayer.DownloadEvent {
}
public protocol AvailableTracksDownloadedEvent : BVPlayer.DownloadEvent {
}
public protocol DownloadedContentRenewedEvent : BVPlayer.DownloadEvent {
}
public protocol ContentDownloadErrorEvent : BVPlayer.DownloadEvent {
  var code: Swift.Int { get }
  var message: Swift.String { get }
  var data: BVPlayer.UniDeficiencyData? { get }
}
@_hasMissingDesignatedInitializers public class DefaultContentDownloadProgressChangedEvent : BVPlayer.ContentDownloadProgressChangedEvent {
  public var name: Swift.String {
    get
  }
  public var progress: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultContentDownloadResumedEvent : BVPlayer.ContentDownloadResumedEvent {
  public var name: Swift.String {
    get
  }
  public var progress: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultContentDownloadSuspendedEvent : BVPlayer.ContentDownloadSuspendedEvent {
  public var name: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultContentDownloadFinishedEvent : BVPlayer.ContentDownloadFinishedEvent {
  public var name: Swift.String {
    get
  }
  public var bookmarkData: Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultContentDownloadCanceledEvent : BVPlayer.ContentDownloadCanceledEvent {
  public var name: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultDownloadErrorEvent : BVPlayer.ContentDownloadErrorEvent {
  public var name: Swift.String {
    get
  }
  public var code: Swift.Int
  public var message: Swift.String
  public var data: BVPlayer.UniDeficiencyData?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContentKeyErrorEvent : BVPlayer.DefaultDownloadErrorEvent {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultAvailableTracksDownloadedEvent : BVPlayer.AvailableTracksDownloadedEvent {
  public var name: Swift.String {
    get
  }
  public var tracks: BVPlayer.DownloadTrackSelection
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultDownloadedContentRenewedEvent : BVPlayer.DownloadedContentRenewedEvent {
  public var name: Swift.String {
    get
  }
  @objc deinit
}
public enum SourceErrorCode : Swift.Int {
  case general
  case playbackFailed
  case drmGeneral
  case drmConfigMissing
  case noDrmLicenseServerUrlProvided
  case noDrmCertificateServerUrlProvided
  case drmLicenseRequestFailed
  case drmCertificateRequestFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MediaPlaylist {
  public var targetDuration: Swift.Double
  public var segment: [BVPlayer.MediaPlaylist.Segment]
  public struct Segment {
    public var duration: Swift.Double
    public var filePath: Swift.String
  }
  public static func parse(content: Swift.String) -> BVPlayer.MediaPlaylist?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 15.0, *)
@_Concurrency.MainActor(unsafe) public class UniSheetPresentationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(rootViewController: UIKit.UIViewController, detents: [UIKit.UISheetPresentationController.Detent] = [.medium(), .large()])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UniUITableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DownloadManager : ObjectiveC.NSObject {
  public static let shared: BVPlayer.DownloadManager
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadContentManager(for sourceConfig: BVPlayer.UniSourceConfig) async throws -> BVPlayer.DownloadContentManager
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadContentManager(for sourceConfig: BVPlayer.UniSourceConfig, identifier: Swift.String) async throws -> BVPlayer.DownloadContentManager
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadState(for sourceConfig: BVPlayer.UniSourceConfig) async throws -> BVPlayer.DownloadState
  #endif
  @objc deinit
}
public protocol UniLoggerListener : ObjectiveC.NSObjectProtocol {
  func logEvent(_ event: BVPlayer.UniLogEvent)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniLogger : ObjectiveC.NSObject {
  public static let shared: BVPlayer.UniLogger
  public var deviceIdDescription: Swift.String {
    get
  }
  public func add(listener: any BVPlayer.UniLoggerListener)
  public func remove(listener: any BVPlayer.UniLoggerListener)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPlayerFactory {
  public static func create() -> BVPlayer.UniPlayer
  public static func create(player config: BVPlayer.UniPlayerConfig, moduleConfig: [Swift.String : Swift.String] = [:]) -> BVPlayer.UniPlayer
  @objc deinit
}
public class UniPlayerConfig {
  public var key: Swift.String?
  public var styleConfig: BVPlayer.UniStyleConfig {
    get
  }
  public var playbackConfig: BVPlayer.UniPlaybackConfig {
    get
  }
  public var bufferConfig: BVPlayer.UniBufferConfig {
    get
  }
  public var adaptationConfig: BVPlayer.UniAdaptationConfig {
    get
  }
  public var tweaksConfig: BVPlayer.UniTweaksConfig {
    get
  }
  public var remoteControlConfig: BVPlayer.RemoteControlConfig {
    get
  }
  public init()
  @objc deinit
}
extension BVPlayer.UniPlayer {
  public func load(sourceConfig: BVPlayer.UniSourceConfig)
  public func unload()
}
extension BVPlayer.UniPlayer : BVPlayer.UniSourceListener {
  public func source(_ source: BVPlayer.UniSource, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
}
@_hasMissingDesignatedInitializers final public class UniPlaylist {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniUIStyleConfig {
  public var trackTintColor: UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniStyleConfig {
  final public var scalingMode: AVFoundation.AVLayerVideoGravity
  final public var uiStyleConfig: BVPlayer.UniUIStyleConfig
  @objc deinit
}
public struct UniCommonProperty {
}
@objc @_hasMissingDesignatedInitializers public class UniPlayer : ObjectiveC.NSObject {
  public var source: BVPlayer.UniSource? {
    get
  }
  public var playlist: BVPlayer.UniPlaylist {
    get
  }
  public var isPlaying: Swift.Bool
  public var availableVideoQualities: [BVPlayer.UniVideoQuality] {
    get
  }
  public var videoQuality: BVPlayer.UniVideoQuality? {
    get
  }
  public var availableAudio: [BVPlayer.UniAudioTrack] {
    get
  }
  public var availableSubtitles: [BVPlayer.UniSubtitleTrack] {
    get
  }
  public var audio: BVPlayer.UniAudioTrack? {
    get
  }
  public var subtitle: BVPlayer.UniSubtitleTrack {
    get
  }
  public var maxSelectableBitrate: Swift.UInt {
    get
    set
  }
  public var playbackSpeed: Swift.Float {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval
  public var duration: Foundation.TimeInterval {
    get
  }
  public var maxTimeShift: Foundation.TimeInterval {
    get
  }
  public var timeShift: Foundation.TimeInterval {
    get
    set
  }
  public var isLive: Swift.Bool {
    get
  }
  public var pseEnabled: Swift.Bool {
    get
    set
  }
  public var isLoopEnabled: Swift.Bool {
    get
    set
  }
  public var analytics: BVPlayer.Analytics
  @objc deinit
  public func destroy()
  public func add(listener: any BVPlayer.UniPlayerListener)
  public func remove(listener: any BVPlayer.UniPlayerListener)
  public func register(_ playerLayer: AVFoundation.AVPlayerLayer)
  public func register(_ view: UIKit.UIView)
  public func unregisterPlayerLayer(_ playerLayer: AVFoundation.AVPlayerLayer)
}
extension BVPlayer.UniPlayer : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
}
extension BVPlayer.UniPlayer {
  public func setAudio(track identifier: Swift.String)
  public func setSubtitle(track identifier: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class UniControllerPlayerView : BVPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) override public init(player: BVPlayer.UniPlayer, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) override final public func player(_ player: BVPlayer.UniPlayer, didReceiveOnReadyEvent event: any BVPlayer.UniEvent)
  @objc deinit
}
public enum AnalyticsField : Swift.String {
  case token
  case sessionId
  case resourceId
  case userId
  case resourceType
  case customData
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RemoteControlType : Swift.Int {
  case cast
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RemoteControlConfig {
  public var prepareSource: ((_ type: BVPlayer.RemoteControlType, _ sourceConfig: BVPlayer.UniSourceConfig) -> BVPlayer.UniSourceConfig?)?
  @objc deinit
}
extension BVPlayer.UniPlayerView : BVPlayer.UniPlayerListener {
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlayingEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPausedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: BVPlayer.UniTimeChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekEvent event: BVPlayer.UniSeekEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSeekedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallStartedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnStallEndedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: BVPlayer.UniSourceLoadEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: BVPlayer.UniAudioChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: BVPlayer.UniSubtitleChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: BVPlayer.UniVideoPlaybackQualityChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: BVPlayer.UniPlaybackSpeedChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadEvent event: BVPlayer.UniSourceUnloadEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: BVPlayer.UniSourceUnloadedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveErrorEvent event: BVPlayer.UniPlayerErrorEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveTimeShiftedEvent event: any BVPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: BVPlayer.UniPlayer, didReceiveLoadedTimeChangedEvent event: BVPlayer.UniLoadedTimeRangeChangedEvent)
}
public protocol CastManagerListener : ObjectiveC.NSObjectProtocol {
  func updatedMediaStatus(_ mediaStatus: GoogleCast.GCKMediaStatus?)
  func updatedMediaMetadata(_ mediaMetadata: GoogleCast.GCKMediaMetadata)
  func applicationWillConnect(_ deviceName: Swift.String)
  func applicationConnected(_ deviceName: Swift.String)
  func applicationDisconnected()
  func applicationDidFailToStart(_ error: any Swift.Error)
  func applicationRequestDidComplete(_ deviceName: Swift.String)
}
extension BVPlayer.CastManagerListener {
  public func updatedMediaStatus(_ mediaStatus: GoogleCast.GCKMediaStatus?)
  public func updatedMediaMetadata(_ mediaMetadata: GoogleCast.GCKMediaMetadata)
  public func applicationWillConnect(_ deviceName: Swift.String)
  public func applicationConnected(_ deviceName: Swift.String)
  public func applicationDisconnected()
  public func applicationDidFailToStart(_ error: any Swift.Error)
  public func applicationRequestDidComplete(_ deviceName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CastManager : ObjectiveC.NSObject {
  public static let shared: BVPlayer.CastManager
  public static func initializeCasting()
  public static func initializeCasting(options: BVPlayer.CastManagerOptions)
  public var isConnecting: Swift.Bool {
    get
  }
  public var isConnected: Swift.Bool {
    get
  }
  public var currentDevice: GoogleCast.GCKDevice?
  public var currentMediaMetadata: GoogleCast.GCKMediaMetadata? {
    get
    set
  }
  public var currentMediaStatus: GoogleCast.GCKMediaStatus? {
    get
    set
  }
  public func add(listener: any BVPlayer.CastManagerListener)
  public func remove(listener: any BVPlayer.CastManagerListener)
  public func unload()
  public func loadMedia(_ sourceConfig: BVPlayer.UniSourceConfig)
  public func checkReceiverIsPlayingSameContent(_ sourceConfig: BVPlayer.UniSourceConfig) -> Swift.Bool
  @objc deinit
}
extension BVPlayer.CastManager : GoogleCast.GCKSessionManagerListener {
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, didFailToStart session: GoogleCast.GCKCastSession, withError error: any Swift.Error)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, willStart session: GoogleCast.GCKCastSession)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, didStart session: GoogleCast.GCKCastSession)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, willResumeCastSession session: GoogleCast.GCKCastSession)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, didResumeCastSession session: GoogleCast.GCKCastSession)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, didEnd session: GoogleCast.GCKCastSession, withError error: (any Swift.Error)?)
  @objc dynamic public func sessionManager(_ sessionManager: GoogleCast.GCKSessionManager, didSuspend session: GoogleCast.GCKCastSession, with reason: GoogleCast.GCKConnectionSuspendReason)
}
extension BVPlayer.CastManager : GoogleCast.GCKRemoteMediaClientListener {
  @objc dynamic public func remoteMediaClient(_ client: GoogleCast.GCKRemoteMediaClient, didUpdate mediaStatus: GoogleCast.GCKMediaStatus?)
  @objc dynamic public func remoteMediaClient(_ client: GoogleCast.GCKRemoteMediaClient, didUpdate mediaMetadata: GoogleCast.GCKMediaMetadata?)
}
extension BVPlayer.CastManager : GoogleCast.GCKRequestDelegate {
  @objc dynamic public func requestDidComplete(_ request: GoogleCast.GCKRequest)
  @objc dynamic public func request(_ request: GoogleCast.GCKRequest, didFailWithError error: GoogleCast.GCKError)
  @objc dynamic public func request(_ request: GoogleCast.GCKRequest, didAbortWith abortReason: GoogleCast.GCKRequestAbortReason)
}
@objc @_hasMissingDesignatedInitializers public class DownloadContentManager : ObjectiveC.NSObject, BVPlayer.DownloadContentManagerEventHandler {
  public var downloadState: BVPlayer.DownloadState {
    get
  }
  @objc deinit
  public func add(listener: any BVPlayer.DownloadContentManagerListener)
  public func remove(listener: any BVPlayer.DownloadContentManagerListener)
  public func createOfflineSourceConfig() -> BVPlayer.OfflineSourceConfig?
}
extension BVPlayer.DownloadContentManager {
  public func download(tracks: BVPlayer.DownloadTrackSelection, config: BVPlayer.DownloadConfig)
  public func download()
  public func suspendDownload()
  public func resumeDownload()
  public func cancelDownload()
  #if compiler(>=5.3) && $AsyncAwait
  public func deleteOfflineData() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func renewOfflineLicense() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func fetchAvailableTracks() async throws -> BVPlayer.DownloadTrackSelection?
  #endif
  public func fetchVideoQualities() -> [BVPlayer.UniVideoQuality]
}
extension BVPlayer.DownloadContentManager : BVPlayer.UniSourceListener {
  public func source(_ source: BVPlayer.UniSource, didReceiveSourceErrorEvent event: BVPlayer.UniSourceErrorEvent)
}
extension BVPlayer.UniPlayer {
  public func play()
  public func pause()
  public func seek(to time: Foundation.TimeInterval)
  public func rewind(_ offset: Foundation.TimeInterval)
  public func forward(_ offset: Foundation.TimeInterval)
}
public enum UniSourceType : Swift.Int {
  case none
  case hls
  case movpkg
  case dash
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UniFeature : Swift.String {
  case d3
  case pse
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CastImage {
  public init(url: Foundation.URL, width: Swift.Int = 0, height: Swift.Int = 0)
}
public struct CastOptions {
  public let images: [BVPlayer.CastImage]
  public var customData: [Swift.String : Swift.String]
  public init(images: [BVPlayer.CastImage], custom data: [Swift.String : Swift.String] = [:])
}
@objc public class UniSourceConfig : ObjectiveC.NSObject {
  final public let url: Foundation.URL
  final public let type: BVPlayer.UniSourceType
  public var title: Swift.String?
  public var sourceDescription: Swift.String?
  public var posterSource: Foundation.URL?
  public var drmConfig: BVPlayer.UniDrmConfig?
  public var thumbnailTrack: BVPlayer.UniThumbnailTrack?
  public var sharedURL: Foundation.URL?
  public var features: [BVPlayer.UniFeature]
  public var castOptions: BVPlayer.CastOptions?
  public init(url: Foundation.URL, type: BVPlayer.UniSourceType = .hls)
  @objc deinit
}
extension BVPlayer.PLLogSeverity : Swift.Equatable {}
extension BVPlayer.PLLogSeverity : Swift.Hashable {}
extension BVPlayer.PLLogSeverity : Swift.RawRepresentable {}
extension BVPlayer.UniEventName : Swift.Equatable {}
extension BVPlayer.UniEventName : Swift.Hashable {}
extension BVPlayer.UniEventName : Swift.RawRepresentable {}
extension BVPlayer.DownloadState : Swift.Equatable {}
extension BVPlayer.DownloadState : Swift.Hashable {}
extension BVPlayer.DownloadState : Swift.RawRepresentable {}
extension BVPlayer.WebVTTError : Swift.Equatable {}
extension BVPlayer.WebVTTError : Swift.Hashable {}
extension BVPlayer.DownloadTrackAction : Swift.Equatable {}
extension BVPlayer.DownloadTrackAction : Swift.Hashable {}
extension BVPlayer.DownloadTrackAction : Swift.RawRepresentable {}
extension BVPlayer.UniUIEventName : Swift.Equatable {}
extension BVPlayer.UniUIEventName : Swift.Hashable {}
extension BVPlayer.UniUIEventName : Swift.RawRepresentable {}
extension BVPlayer.UniLogEvent.EventName : Swift.Equatable {}
extension BVPlayer.UniLogEvent.EventName : Swift.Hashable {}
extension BVPlayer.UniLogEvent.EventName : Swift.RawRepresentable {}
extension BVPlayer.UniLogEvent.PropertyName : Swift.Equatable {}
extension BVPlayer.UniLogEvent.PropertyName : Swift.Hashable {}
extension BVPlayer.UniLogEvent.PropertyName : Swift.RawRepresentable {}
extension BVPlayer.UniPlayerErrorCode : Swift.Equatable {}
extension BVPlayer.UniPlayerErrorCode : Swift.Hashable {}
extension BVPlayer.UniPlayerErrorCode : Swift.RawRepresentable {}
extension BVPlayer.SourceErrorCode : Swift.Equatable {}
extension BVPlayer.SourceErrorCode : Swift.Hashable {}
extension BVPlayer.SourceErrorCode : Swift.RawRepresentable {}
extension BVPlayer.AnalyticsField : Swift.Equatable {}
extension BVPlayer.AnalyticsField : Swift.Hashable {}
extension BVPlayer.AnalyticsField : Swift.RawRepresentable {}
extension BVPlayer.RemoteControlType : Swift.Equatable {}
extension BVPlayer.RemoteControlType : Swift.Hashable {}
extension BVPlayer.RemoteControlType : Swift.RawRepresentable {}
extension BVPlayer.UniSourceType : Swift.Equatable {}
extension BVPlayer.UniSourceType : Swift.Hashable {}
extension BVPlayer.UniSourceType : Swift.RawRepresentable {}
extension BVPlayer.UniFeature : Swift.Equatable {}
extension BVPlayer.UniFeature : Swift.Hashable {}
extension BVPlayer.UniFeature : Swift.RawRepresentable {}
